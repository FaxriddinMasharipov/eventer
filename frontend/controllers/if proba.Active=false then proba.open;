SELECT id,tovar_id,tovar_nom,kol,kol_in,kol_ost,kol_in_ost,asos_id,del_flag FROM `asos_slave` WHERE `tovar_id` LIKE 693 ORDER BY `asos_slave`.`id` ASC



SELECT asos_slave.id as ids,asos_slave.sotish as sot,asos_slave.sotish_in as sotin,SUM(asos_slave.kol_ost) as kol_ost,SUM(asos_slave.kol_in_ost) as kol_in_ost,s_tovar.nom as nom , s_tovar.id as idt, s_tovar.kol_in as tkol_in from asos_slave,asos,s_tovar where asos.id = asos_slave.asos_id and asos_slave.del_flag = 1 and (asos.tur_oper=1 or asos.tur_oper=4 or asos.tur_oper=5) and (asos_slave.kol_ost>0 || asos_slave.kol_in_ost>0 ) and s_tovar.id = asos_slave.tovar_id and tovar_id=7 group by tovar_id

SELECT asos_slave.id as ids,asos_slave.sotish as sot,asos_slave.sotish_in as sotin,asos_slave.kol_ost as kol_ost,asos_slave.kol_in_ost as kol_in_ost,s_tovar.nom as nom , s_tovar.id as idt, s_tovar.kol_in as tkol_in from asos_slave,asos,s_tovar where asos.id = asos_slave.asos_id and asos_slave.del_flag = 1 and (asos.tur_oper=1 or asos.tur_oper=4 or asos.tur_oper=5) and (asos_slave.kol_ost>0 || asos_slave.kol_in_ost>0 ) and s_tovar.id = asos_slave.tovar_id and tovar_id=7


SELECT s_tovar.nom,asos_slave.kol_ost,asos_slave.kol_in_ost FROM `asos_slave`,s_tovar,asos WHERE asos.id=asos_slave.asos_id and asos.tur_oper in (1,4,5) and s_tovar.id=asos_slave.tovar_id and (`kol_ost` < 0 or `kol_in_ost` < 0) and asos_slave.del_flag=1 ORDER BY `asos_slave`.`tovar_id` ASC

DELETE FROM `asos_slave` WHERE tovar_nom is NOT null;DELETE FROM `asos` WHERE tur_oper=2;


Anvar Quvandiqov, [05.09.19 12:44]
 @Override
    public Integer addProducts(Integer delFlag,Integer asosId, Integer userId, ProductsDto productsDto) {


        Integer type=asosRepository.findById(asosId ).get().getSotuv_turi();

      

        Boolean checkInt=false;
        Integer inCountAll = 0;
        Integer   countAll = 0;
        for (int i = 0; i <list.size() ; i++) {
            countAll += list.get(i).getKol_ost();
            inCountAll += list.get(i).getKol_in_ost();
        }

        if(countAll>productsDto.getCount() && productsDto.getIncount()==0){
            checkInt=true;
        }
        else if(countAll*productsDto.getIncnt() + inCountAll < productsDto.getCount()*productsDto.getIncnt() + productsDto.getIncount()){
            return (countAll*productsDto.getIncnt() + inCountAll) - (productsDto.getCount()*productsDto.getIncnt() + productsDto.getIncount());
        }
        else{
            checkInt=false;
        }

        Integer productsCount=productsDto.getCount();
        Integer productsInCount=productsDto.getIncount();

        Integer Kol = 0;
        Integer Kol_in = 0;

        AsosSlave res = new AsosSlave();
        Integer row=productsDto.getCount()*productsDto.getIncnt()+productsDto.getIncount();

        List<AsosSlave> asosSlaveList=asosSlaveRepository.findAll();
        List<AsosSlave> slaves=new ArrayList<>();
        for (int i = 0; i <asosSlaveList.size() ; i++) {
            if(asosSlaveList.get(i).getAsos_id().equals(asosId) &&
                    asosSlaveList.get(i).getTovar_id().equals(productsDto.getProductId()) &&
                    asosSlaveList.get(i).getDel_flag().equals(2)){
                slaves.add(asosSlaveList.get(i));
            }
        }
        int cnt=0;

        for (int i = 0; i <list.size() ; i++) {
            AsosSlave asosSlave=list.get(i);




            Integer asosSlaveOst_in = asosSlave.getKol_in_ost();
            Integer asosSlaveOst = asosSlave.getKol_ost();



            AsosSlave asosSlaveInsert=new AsosSlave();

            if(delFlag.equals(2)){
                asosSlaveInsert.setDel_flag(1);
                asosSlaveInsert.setId(slaves.get(cnt++).getId());
            }

            Integer all= asosSlaveOst*productsDto.getIncnt() + asosSlaveOst_in;


            if(checkInt){

                if(productsCount==0){
                    break;
                }

                if(countAll>=productsCount && productsCount>0){

                    if(asosSlaveOst >= productsCount){
                        asosSlaveOst -= productsCount;
                        Kol=productsCount;
                        Kol_in=0;
                        productsCount=0;
                    }
                    if (asosSlaveOst < productsCount && productsCount>0){
                        productsCount -= asosSlaveOst;
                        Kol=asosSlaveOst;
                        Kol_in=0;
                        asosSlaveOst=0;
                    }
                }

            }
            else{
                if (row==0){
                    break;
                }
                if(all>=row && row>0){
                    all-=row;
                    asosSlaveOst=all / productsDto.getIncnt();
                    asosSlaveOst_in=all % productsDto.getIncnt();
                    Kol   =row / productsDto.getIncnt();
                    Kol_in=row % productsDto.getIncnt();
                    row=0;
                }
                else{
                    row-=all;

                    asosSlaveOst=0;
                    asosSlaveOst_in=0;

                    Kol   =all / productsDto.getIncnt();
                    Kol_in=all % productsDto.getIncnt();
                }
            }


            asosSlave.setKol_ost(asosSlaveOst);
            asosSlave.setKol_in_ost(asosSlaveOst_in);
            asosSlaveRepository.save(asosSlave);

            Double   summaIn =(Double)(Kol_in * productsDto.getInprice()*1.0);
            Double     summa =(Double)(Kol * productsDto.getPrice()*1.0);
            Double  summaAll = summa + summaIn;


            asosSlaveInsert.setTovar_nom(productsDto.getName());
            asosSlaveInsert.setTovar_id(productsDto.getProductId());
            asosSlaveInsert.setAsos_id(asosId);

            asosSlaveInsert.setUser_id(userId);

            asosSlaveInsert.setKol(Kol);
            asosSlaveInsert.setKol_in(Kol_in);

            asosSlaveInsert.setSumma(summa);
            asosSlaveInsert.setSumma_in(summaIn);
            asosSlaveInsert.setSumma_all(summaAll);
            asosSlaveInsert.setSotish((Double) (productsDto.getPrice()*1.0));
            asosSlaveInsert.setSotish_in((Double)(productsDto.getInprice()*1.0));
            asosSlaveInsert.setSena(asosSlave.getSena());
            asosSlaveInsert.setSena_in(asosSlave.getSena_in());
            asosSlaveInsert.setKol_ost(asosSlave.getId());

            asosSlaveInsert.setKol_in_ost(0);
            asosSlaveInsert.setTuri(0);
            asosSlaveInsert.setSubkod(0);
            asosSlaveInsert.setDel_flag(1);
            asosSlaveInsert.setSumma_all_ost(0.0);
            asosSlaveInsert.setZakaz_see(0.0);
            asosSlaveInsert.setResept(0);

            asosSlaveInsert.setIzm_id(asosSlave.getIzm_id());
            asosSlaveInsert.setIzm1(asosSlave.getIzm1());

            res=asosSlaveRepository.save(asosSlaveInsert);

        }
        return res.getId();
    }
    Anvar Quvandiqov, [05.09.19 12:44]


                if(all>=row && row>0){
                    all-=row;
                    asosSlaveOst=all / productsDto.getIncnt();
                    asosSlaveOst_in=all % productsDto.getIncnt();
                    Kol   =row / productsDto.getIncnt();
                    Kol_in=row % productsDto.getIncnt();
                    row=0;
                }
                else{
                    row-=all;

                    asosSlaveOst=0;
                    asosSlaveOst_in=0;

                    Kol   =all / productsDto.getIncnt();
                    Kol_in=all % productsDto.getIncnt();
                }
            }


            asosSlave.setKol_ost(asosSlaveOst);
            asosSlave.setKol_in_ost(asosSlaveOst_in);
            asosSlaveRepository.save(asosSlave);

            Double   summaIn =(Double)(Kol_in * productsDto.getInprice()*1.0);
            Double     summa =(Double)(Kol * productsDto.getPrice()*1.0);
            Double  summaAll = summa + summaIn;


            asosSlaveInsert.setTovar_nom(productsDto.getName());
            asosSlaveInsert.setTovar_id(productsDto.getProductId());
            asosSlaveInsert.setAsos_id(asosId);

            asosSlaveInsert.setUser_id(userId);

            asosSlaveInsert.setKol(Kol);
            asosSlaveInsert.setKol_in(Kol_in);

            asosSlaveInsert.setSumma(summa);
            asosSlaveInsert.setSumma_in(summaIn);
            asosSlaveInsert.setSumma_all(summaAll);
            asosSlaveInsert.setSotish((Double) (productsDto.getPrice()*1.0));
            asosSlaveInsert.setSotish_in((Double)(productsDto.getInprice()*1.0));
            asosSlaveInsert.setSena(asosSlave.getSena());
            asosSlaveInsert.setSena_in(asosSlave.getSena_in());
            asosSlaveInsert.setKol_ost(asosSlave.getId());

            asosSlaveInsert.setKol_in_ost(0);
            asosSlaveInsert.setTuri(0);
            asosSlaveInsert.setSubkod(0);
            asosSlaveInsert.setDel_flag(1);
            asosSlaveInsert.setSumma_all_ost(0.0);
            asosSlaveInsert.setZakaz_see(0.0);
            asosSlaveInsert.setResept(0);

            asosSlaveInsert.setIzm_id(asosSlave.getIzm_id());
            asosSlaveInsert.setIzm1(asosSlave.getIzm1());

            res=asosSlaveRepository.save(asosSlaveInsert);

        }
        return res.getId();
    }

STovar::updateAll(['upakavka'=> null],['id'=>$tek['tovar_id']]);

    dms.link.Close;dms.link.SQL.Clear;
    dms.link.SQL.Add('update s_tovar set upakavka = null where id='+DMS.s_tovarid.AsString);
    dms.link.ExecSQL;
